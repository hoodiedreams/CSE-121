#!/usr/bin/env python3

import sys
import time
from gpiozero import LED
from gpiozero.pins.pigpio import PiGPIOFactory

# Set up pigpio pin factory
factory = PiGPIOFactory()

# GPIO setup
led = LED(17, pin_factory=factory)  # GPIO pin number - adjust based on your connection

# Morse code timing (in seconds)
DOT_DURATION = 0.2
DASH_DURATION = DOT_DURATION * 3
SYMBOL_SPACE = DOT_DURATION
LETTER_SPACE = DOT_DURATION * 3
WORD_SPACE = DOT_DURATION * 7

# Morse code dictionary
MORSE_CODE = {
    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 
    'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 
    'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 
    'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 
    'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 
    'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', 
    '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',
    '9': '----.', ' ': '/'
}

def blink_dot():
    """Blink the LED for a dot duration."""
    led.on()
    time.sleep(DOT_DURATION)
    led.off()

def blink_dash():
    """Blink the LED for a dash duration."""
    led.on()
    time.sleep(DASH_DURATION)
    led.off()

def send_morse_character(morse_code):
    """Send a single character in Morse code."""
    for i, symbol in enumerate(morse_code):
        if symbol == '.':
            blink_dot()
        elif symbol == '-':
            blink_dash()
        elif symbol == '/':
            time.sleep(WORD_SPACE)
            continue  # Skip symbol space after '/'
        
        # Space between symbols within the same character
        if i < len(morse_code) - 1:  # If not the last symbol
            time.sleep(SYMBOL_SPACE)

def send_morse_message(message):
    """Send a full message in Morse code."""
    # Convert message to uppercase
    message = message.upper()
    
    # Print the morse representation first
    print_str = ""
    for i, char in enumerate(message):
        if char in MORSE_CODE:
            morse = MORSE_CODE[char]
            # Add a space between morse code patterns except after the last one
            if i < len(message) - 1 and char != ' ' and message[i+1] != ' ':
                print_str += morse + " "
            else:
                print_str += morse
    print(print_str)
    
    # Send the message
    for i, char in enumerate(message):
        if char in MORSE_CODE:
            send_morse_character(MORSE_CODE[char])
            
            # Add space between letters (but not after spaces or last character)
            if char != ' ' and i < len(message) - 1 and message[i+1] != ' ':
                time.sleep(LETTER_SPACE)

def main():
    """Main function to process command line arguments and send messages."""
    # Check command-line arguments
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <repeat_count> \"<message>\"")
        sys.exit(1)
    
    # Parse repeat count
    try:
        repeat_count = int(sys.argv[1])
        if repeat_count <= 0:
            raise ValueError("Repeat count must be a positive integer")
    except ValueError as e:
        print(e)
        sys.exit(1)
    
    # Get message
    message = sys.argv[2]
    
    # Send the message repeatedly
    for i in range(repeat_count):
        print(f"Sending message {i+1} of {repeat_count}: ", end='')
        send_morse_message(message)
        
        # Add a pause between repetitions
        if i < repeat_count - 1:
            time.sleep(WORD_SPACE)

if __name__ == "__main__":
    main()
